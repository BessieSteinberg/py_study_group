 ☐ python scoping, local and global
 ☐ builtin vs local
 ☐ mocking
 ☐ when should exceptions be used? what is an 'exceptional' condition? should it be used for code flow?
 ☐ with

☐ things we hate about python vs. things we love about python (they are the same things)
  ☐ ABCs
  ☐ type hinting in python 3
  ☐ package management
  ☐ celery
  ☐ virtualenv (the fact that you need it)
  ☐ performance - attitude around performance
  ☐ python 2/3 split #theBigBreakUp
  ☐ properties
  ☐ everything is public

☐ python names and values ned's pycon talk (bit.ly/pynames1)
  ☐ assignment (imports, values, for loops)
☐ exceptions 
  ☐ flow control
  ☐ what is an exceptional situation
  ☐ finally
  ☐ else clause
☐ context managers
☐ descriptors
☐ when to use decorators vs mixins
☐ abstract base classes (ABC) - what it is and why its controversial
☐ collections 
 ☐ classes vs dictionaries and when to use which 
   ☐ namedtuple
   ☐ attrs / dataclasses
 ☐ lambda expressions 
   ☐ what makes python classes different than C and Java
   ☐ is there ever a reason to use a static method
   ☐ set up road blocks for what we will not talk about in this meeting
     ☐ Not gonna talk about Meta Class
 ☐ testing and mocking @medium
 ☐ bisect - binary search
 ☐ heap queue - partially sorted heap
 ☐ @classmethod vs @staticmethod vs self.foo() 
 ☐ dymanic inheritence
 ☐ our coding questions



＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
 ✔ how to be cross compatable with different python versions @done (18-07-10 14:56)
 ✔ with keyword @done (18-06-27 15:57)
 ✔ python 3 related features we should start taking advantage of @done (18-06-27 15:57)
 ✔ __enter__ __exit__ @done (18-06-27 15:57)
 ✔ special methods (magic methods) (illusion methods) @high @done (18-06-27 15:35)
 ✔ new style vs old style class (if you derive from object you are new style) @done (18-06-27 15:35)
 ✔ what you are vs. what you do (java vs. python) @done (18-06-27 15:34)
 ✔ str @done (18-06-27 15:34)
 ✔ some are attributes like mro, doc @done (18-06-27 15:34)
 ✔ repr @done (18-06-27 15:34)
 ✔ init @done (18-06-27 15:34)
 ✔ https://www.youtube.com/watch?v=WiQqqB9MlkA @done (18-06-27 15:34)
 ✔ https://docs.python.org/2/reference/datamodel.html @done (18-06-27 15:34)
 ✔ elegant solutions: @done (18-06-27 15:34)
 ✔ don't talk about descriptors @done (18-06-27 15:34)
 ✔ desctrucor __del__ @done (18-06-27 15:34)
 ✔ __call__ method / callables @done (18-06-27 15:34)
 ✔ iter tools  @high @done (18-06-14 17:33)
 ✔ so you can't redefine them @done (18-05-22 13:27)
 ✔ and and or aren't operators @done (18-05-22 13:27)
 ✔ one to one mapping of python syntax @done (18-05-22 11:55)
 ✔ list [] is __get__ etc.. @done (18-05-22 11:55)
 ✔ turn magic methods to special methods @done (18-05-21 22:10)
 ✔ super @done (18-05-01 14:54)
 ✔ mixins / multiple inheratance @done (18-05-01 14:54)
 ✔ decoractors - when to use them, what is the value add @high @done (18-05-01 14:54)
 ✔ compossition @done (18-05-01 14:54)
 ✔ alternatives to inheratance @done (18-05-01 14:54)
